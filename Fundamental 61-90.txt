// Write a JavaScript program to cast the provided value as an array if it's not one.

const cast = val => Array.isArray(val) ? val : Array.from(val)

console.log(castArray('w3r')); 
console.log(castArray([100]));

// Write a JavaScript program to clone a given regular expression.

const clone = regExp => new RegExp(regExp);
const regExp = /lorem ipsum/gi;
console.log(regExp);
const regExp2 = clone(regExp);
console.log(regExp2);

// Write a JavaScript program to get the first non-null / undefined argument.

const findNullOrUndefined = (...args) => args.find(val => ! [undefined, null].includes(val));
console.log(findNullOrUndefined(null, undefined, '', NaN, 'abcd'));

// Write a JavaScript program to perform right-to-left function composition.

const compose = (...fns) => fns.reduce((f, g) => (...args) => f(g(...args)));
const add = x => x+5;
const divide = (x, y) => x/y;
const divideAndAddFive = compose(
  add,
  divide
);
console.log(divideAndAddFive(20, 2));

// Write a JavaScript program to perform left-to-right function composition.

const compose = (...fns) => fns.reduce((f, g) => (...args) => g(f(...args)));
const add = (x,y) => x+y;
const divide = x => x/2;
const addAndDivide = compose(
  add,
  divide
);
console.log(addAndDivide(20, 2));

// Write a JavaScript program to group the elements of an array based on the given function and returns the count of elements in each group.

const count = (arr, fn) => arr.map(fn).reduce((acc, val, i) => { acc[val] = (acc[val] || 0) + 1; return acc}, {});
console.log(count([6, 10, 100, 10], Math.sqrt)); 
console.log(count([6.1, 4.2, 6.3], Math.floor));

// Write a JavaScript program to count the occurrences of a value in an array.

const countOccurrences = (arr, val, count = 0) => arr.filter((v) => v === val).length;
console.log(countOccurrences([1, 1, 2, 1, 2, 3], 1));
console.log(countOccurrences([1, 1, 2, 1, 2, 3], 2));
console.log(countOccurrences([1, 1, 2, 1, 2, 3], 3));

// Write a JavaScript program to  detect whether the website is being opened in a mobile device or a desktop/laptop.

const reg = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;
const detectDeviceType = () => reg.test(navigator.userAgent) ? 'Mobile' : 'Desktop';
console.log(detectDeviceType());

// Write a JavaScript program to return the difference between two arrays, after applying the provided function to each array element of both.

const differenceBy = (a, b, fn) => {
  const s = new Set(b.map(v => fn(v)));
  return a.filter(x => !s.has(fn(x)));
};
console.log(differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor));
console.log(differenceBy([{ x: 2 }, { x: 1 }], [{ x: 1 }], v => v.x));

// Write a JavaScript program to filter out all values from an array for which the comparator function does not return true.

const differenceWith = (arr, val, comp) => arr.filter(a => val.findIndex(b => comp(a, b)) === -1);
console.log(differenceWith([1, 1.2, 1.5, 3, 0], [1.9, 3, 0], (a, b) => Math.round(a) === Math.round(b)));

// Write a JavaScript program to execute a provided function once for each array element, starting from the array's last element.

const forEachElement = (arr, callback) => arr.reverse().forEach(callback);
forEachElement([1, 2, 3, 4], val => console.log(val));

// Write a JavaScript program to iterate over all own properties of an object, running a callback for each one.

const runCallbackForObj = (obj, fn) => Object.keys(obj).forEach(key => fn(obj[key], key, obj));
runCallbackForObj({ foo: 'bar', a: 1 }, v => console.log(v));

// Write a JavaScript program to invert the key-value pairs of an object, without mutating it. The corresponding inverted 
// value of each inverted key is an array of keys responsible for generating the inverted value. If a function is supplied,
// it is applied to each inverted key.

function invertKeyValues(obj, fn) {
  return Object.keys(obj).reduce((acc, key) => {
    const val = fn ? fn(obj[key]) : obj[key];
		if(acc[val]){
  		acc[val]=acc[val];
    } else {
			acc[val] = [];
    }
    acc[val].push(key);
    return acc;
  }, {});
}
console.log(invertKeyValues({ a: 1, b: 2, c: 1 }));
console.log(invertKeyValues({ a: 1, b: 2, c: 1 }, value => 'group' + value));

// Write a JavaScript program to take any number of iterable objects or objects with a length property and returns the longest one.

const longestItem = (...vals) => Array.from(vals).sort((a, b) => b.length - a.length)[0];
console.log(longestItem('this', 'is', 'a', 'testcase'));
console.log(longestItem(...['a', 'ab', 'abc']));
console.log(longestItem(...['a', 'ab', 'abc'], 'abcd'));
console.log(longestItem([1, 2, 3], [1, 2], [1, 2, 3, 4, 5]));
console.log(longestItem([1, 2, 3], 'foobar'));

// Write a JavaScript program to create an object with keys generated by running the provided
// function for each key and the same values as the provided object.

const mapKeys = (obj, fn) => Object.keys(obj).reduce((result, el)=>{ result[fn(obj[el],el)] =  obj[el]
return result;}, {})
console.log(mapKeys({ a: 1, b: 2 }, (val, key) => key + val));

// Write a JavaScript program to map the values of an array to an object using a function,
// where the key-value pairs consist of the original value as the key and the mapped value.

const mapObject = (arr, fn) => arr.reduce( (acc, val)=> {acc[val] = fn(arr[val - 1]); return acc;},{});
const squareIt = arr => mapObject(arr, a => a * a);
console.log(squareIt([1, 2, 3, 4])); 

// Write a JavaScript program to create a new string with the results of calling a provided function on every character in the calling string.

const mapString = (str, fn) => [...str].map(fn).join('');

console.log(mapString('Javascript exercises', c => c.toUpperCase()));

// Write a JavaScript program to create an object with the same keys as the provided object and values generated by running 
// the provided function for each value.

const mapValues = (obj, fn) => Object.keys(obj).reduce( (acc, val) => {
acc[val] = fn(obj[val]);return acc;
}, {})

const users = {
  fred: { user: 'fred', age: 40 },
  pebbles: { user: 'pebbles', age: 1 }
};

console.log(mapValues(users, u => u.age));

// Write a JavaScript program to replace all but the last number of characters with the specified mask character.

const mask = (cc, num = 4, mask = '*') => {
	const string = [...(cc + "")];
  return num > 0 ? string.fill(mask, string.length - num) : string.fill(mask, 0, Math.abs(num));
}

console.log(mask(1234567890)); 
console.log(mask(1234567890, 3));
console.log(mask(1234567890, -4, '$'));

// Write a JavaScript program to get the maximum value of an array, after mapping each element to a value using the provided function.

const maxBy = (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));
console.log(maxBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n));
console.log(maxBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n'));

// Write a JavaScript program to get the n maximum elements from the provided array.
// If n is greater than or equal to the provided array's length, then return the original array(sorted in descending order).

const maxN = (arr, n = 1) => arr.sort((a, b) => b - a).slice(0, n);
console.log(maxN([1, 2, 3]));
console.log(maxN([1, 2, 3], 2));

// Write a JavaScript program to get the median of an array of numbers.

const median = arr => arr.sort((a, b) => a - b)[Math.floor(arr.length / 2)];
console.log(median([5, 6, 50, 1, -5]));
console.log(median([1, 2, 3, 4, 5]));

// Write a JavaScript program to negates a predicate function.

const negate = func => (...args) => !func(...args);
console.log([1, 2, 3, 4, 5, 6].filter(negate(n => n % 2 === 0)));

// 




