// Write a JavaScript program to compare two objects to determine if the 
// first one contains equivalent property values to the second one

const matches = (obj1, obj2) => Object.keys(obj2).every( prop => !obj1.hasOwnProperty(prop) ? false : true);

console.log(matches({ age: 25, hair: 'long', beard: true }, { hair: 'long', beard: true })); // true
console.log(matches({ hair: 'long', beard: true }, { age: 25, hair: 'long', beard: true })); // false
console.log(matches({ hair: 'long', beard: true }, { age: 26, hair: 'long', beard: true })); // false

// Write a JavaScript program to converts a specified number to an array of digits. 

const digitize = (number) => Array.from(number.toString()).map(el => parseInt(el));

console.log(digitize(123));
console.log(digitize(1230));

// Write a JavaScript program to filter out the specified values from a specified array. 
// Return the original array without the filtered values.

function pull(array, ...remove) {
	remove.forEach( el => {array = array.filter( item => item != el)});
	return array;
}

let arra1 = ['a', 'b', 'c', 'a', 'b', 'c'];
console.log(pull(arra1, 'a', 'c'));
let arra2 =  ['a', 'b', 'c', 'a', 'b', 'c'];
console.log(pull(arra2, 'b'));

// Write a JavaScript program to combine the numbers of a given array into an array containing all combinations.

const powerset = arr => arr.reduce((a, v) => a.concat(a.map(r => [v].concat(r))), [[]]);
console.log(powerset([1, 2]));
console.log(powerset([1, 2, 3]));
console.log(powerset([1, 2, 3, 4]));

// Write a JavaScript program to extract out the values at the specified indexes from a specified array.

const pull_at_Index = (arr, pullArr) => {
	let newArr = [];
	pullArr.forEach(item => arr[item] ? newArr.push(arr[item]) : false);
	return newArr;
};

let arra1 = ['a', 'b', 'c', 'd', 'e', 'f'];
console.log(pull_at_Index(arra1, [1, 3]));
let arra2 =  [1, 2, 3, 4, 5, 6, 7];
console.log(pull_at_Index(arra2, [4]));

// Write a JavaScript program to target a given value in a nested JSON object, based on the given key.

const dig = (obj, target) =>
  target in obj
    ? obj[target]
    : Object.values(obj).reduce((acc, val) => {
        if (acc !== undefined) return acc;
        if (typeof val === 'object') return dig(val, target);
      }, undefined);

// Write a JavaScript program to convert an array of objects to a comma-separated values (CSV)
// string that contains only the columns specified.

const JSON_to_CSV = (arr, columns, delimiter = ',') =>
  [
    columns.join(delimiter),
    ...arr.map(obj =>
      columns.reduce(
        (acc, key) => `${acc}${!acc.length ? '' : delimiter}"${!obj[key] ? '' : obj[key]}"`,
        ''
      )
    )
  ].join('\n');

// Write a JavaScript program to convert a comma-separated values (CSV) string to 
// a 2D array of objects. The first row of the string is used as the title row.

const CSV_to_JSON = (data, delimiter = ',') => {
  const titles = data.slice(0, data.indexOf('\n')).split(delimiter);
  return data
    .slice(data.indexOf('\n') + 1)
    .split('\n')
    .map(v => {
      const values = v.split(delimiter);
      return titles.reduce((obj, title, index) => ((obj[title] = values[index]), obj), {});
    });
};