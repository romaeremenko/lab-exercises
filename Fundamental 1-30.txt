// Write a JavaScript program to compare two objects to determine if the 
// first one contains equivalent property values to the second one

const matches = (obj1, obj2) => Object.keys(obj2).every( prop => !obj1.hasOwnProperty(prop) ? false : true);

console.log(matches({ age: 25, hair: 'long', beard: true }, { hair: 'long', beard: true })); // true
console.log(matches({ hair: 'long', beard: true }, { age: 25, hair: 'long', beard: true })); // false
console.log(matches({ hair: 'long', beard: true }, { age: 26, hair: 'long', beard: true })); // false

// Write a JavaScript program to converts a specified number to an array of digits. 

const digitize = (number) => Array.from(number.toString()).map(el => parseInt(el));

console.log(digitize(123));
console.log(digitize(1230));

// Write a JavaScript program to filter out the specified values from a specified array. 
// Return the original array without the filtered values.

function pull(array, ...remove) {
	remove.forEach( el => {array = array.filter( item => item != el)});
	return array;
}

let arra1 = ['a', 'b', 'c', 'a', 'b', 'c'];
console.log(pull(arra1, 'a', 'c'));
let arra2 =  ['a', 'b', 'c', 'a', 'b', 'c'];
console.log(pull(arra2, 'b'));

// Write a JavaScript program to combine the numbers of a given array into an array containing all combinations.

const powerset = arr => arr.reduce((a, v) => a.concat(a.map(r => [v].concat(r))), [[]]);
console.log(powerset([1, 2]));
console.log(powerset([1, 2, 3]));
console.log(powerset([1, 2, 3, 4]));

// Write a JavaScript program to extract out the values at the specified indexes from a specified array.

const pull_at_Index = (arr, pullArr) => {
	let newArr = [];
	pullArr.forEach(item => arr[item] ? newArr.push(arr[item]) : false);
	return newArr;
};

let arra1 = ['a', 'b', 'c', 'd', 'e', 'f'];
console.log(pull_at_Index(arra1, [1, 3]));
let arra2 =  [1, 2, 3, 4, 5, 6, 7];
console.log(pull_at_Index(arra2, [4]));

// Write a JavaScript program to target a given value in a nested JSON object, based on the given key.

const dig = (obj, target) =>
  target in obj
    ? obj[target]
    : Object.values(obj).reduce((acc, val) => {
        if (acc !== undefined) return acc;
        if (typeof val === 'object') return dig(val, target);
      }, undefined);

// Write a JavaScript program to convert an array of objects to a comma-separated values (CSV)
// string that contains only the columns specified.

const JSON_to_CSV = (arr, columns, delimiter = ',') =>
  [
    columns.join(delimiter),
    ...arr.map(obj =>
      columns.reduce(
        (acc, key) => `${acc}${!acc.length ? '' : delimiter}"${!obj[key] ? '' : obj[key]}"`,
        ''
      )
    )
  ].join('\n');

// Write a JavaScript program to convert a comma-separated values (CSV) string to 
// a 2D array of objects. The first row of the string is used as the title row.

const CSV_to_JSON = (data, delimiter = ',') => {
  const titles = data.slice(0, data.indexOf('\n')).split(delimiter);
  return data
    .slice(data.indexOf('\n') + 1)
    .split('\n')
    .map(v => {
      const values = v.split(delimiter);
      return titles.reduce((obj, title, index) => ((obj[title] = values[index]), obj), {});
    });
};

// Write a JavaScript program to generate a random hexadecimal color code.

const random_hex_color_code = () => {
  let n = (Math.random() * 0xfffff * 1000000).toString(16);
  return '#' + n.slice(0, 6);
};

console.log(random_hex_color_code())

// Write a JavaScript program to convert the length of a given string in bytes.

const byte_Size = str => new Blob([str]).size;
console.log(byte_Size('123456'));  
console.log(byte_Size('Hello World'));  
console.log(byte_Size('Ã¢')); 

// Write a JavaScript program to return the minimum-maximum value of an array, 
// after applying the provided function to set comparing rule.

const returnValueByComparing = (arr, comparator = (a, b) => a - b) =>
  arr.reduce((a, b) => (comparator(a, b) >= 0 ? b : a));
console.log(returnValueByComparing([1, 3, 2])); 
console.log(returnValueByComparing([10, 30, 20], (a, b) => b - a));  
console.log(returnValueByComparing(
  [{ name: 'Kevin', age: 16 }, { name: 'John', age: 20 }, { name: 'Ani', age: 19 }],
  (a, b) => a.age - b.age)); 

// Write a JavaScript function that returns true if the provided predicate 
// function returns true for all elements in a collection, false otherwise.

const conditionCheck = (arr, fn = Boolean) => arr.every(fn);
console.log(conditionCheck([4, 2, 3], x => x > 1)); 
console.log(conditionCheck([4, 2, 3], x => x < 1));
console.log(conditionCheck([1, 2, 3])); 

// Write a JavaScript program to split values of two given arrays into two groups. If an element in filter is truthy, 
// the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.

const bifurcate = (arr, filter) => {
	let firstArr = [], secondArr = [];
	arr.forEach( (el, index, arr) => filter[index] ? firstArr.push(el) : secondArr.push(el));
	return [firstArr, secondArr];
};
console.log(bifurcate([1, 2, 3, 4], [true, true, false, true]));
console.log(bifurcate([1, 2, 3, 4], [true, true, true, true]));
console.log(bifurcate([1, 2, 3, 4], [false, false, false, false]));

// Write a JavaScript program to remove specified elements from the left of a given array of elements.

const remove_from_left = (arr, n = 1) => arr.slice(n); 

console.log(remove_from_left([1, 2, 3]));
console.log(remove_from_left([1, 2, 3], 1));
console.log(remove_from_left([1, 2, 3], 2));
console.log(remove_from_left([1, 2, 3], 4));

// Write a JavaScript program to remove specified elements from the right of a given array of elements.

const remove_from_right = (arr, n = -1) => arr.slice(-n); 

console.log(remove_from_right([1, 2, 3]));
console.log(remove_from_right([1, 2, 3], 1));
console.log(remove_from_right([1, 2, 3], 2));        
console.log(remove_from_right([1, 2, 3], 4));

// Write a JavaScript program to get every nth element in a given array. 

const every_nth = (arr, nth) => arr.filter((el, index) => index % nth === nth - 1);
console.log(every_nth([1, 2, 3, 4, 5, 6], 1));
console.log(every_nth([1, 2, 3, 4, 5, 6], 2));
console.log(every_nth([1, 2, 3, 4, 5, 6], 3));
console.log(every_nth([1, 2, 3, 4, 5, 6], 4));

// Write a JavaScript program to filter out the non-unique values in an array. 

const onlyUnique = arr => arr.filter(i => arr.indexOf(i) === arr.lastIndexOf(i));

console.log(onlyUnique([1, 2, 2, 3, 4, 4, 5]));  
console.log(onlyUnique([1, 2, 3, 4]));  

// Write a JavaScript program to filter out the element(s) of a given array, that have one of the specified values.

const filter = (arr, ...junk) => arr.filter(el => !junk.includes(el));

console.log(filter([2, 1, 2, 3], 1, 2));
console.log(filter([2, 1, 2, 3], 3));

// Write a JavaScript program to convert a value to a safe integer.

const safeInteger = num => Math.round(Math.max(Math.min(num, Number.MAX_SAFE_INTEGER), Number.MIN_SAFE_INTEGER));
console.log(safeInteger('5.2'));
console.log(safeInteger('5.52'));
console.log(safeInteger(Infinity)); 

// Write a JavaScript program to dcapitalize the first letter of a string.

const decapitalize = ([first, ...rest], upperRest = false) => first.toLowerCase() + (upperRest ? rest.join('').toUpperCase() : rest.join(''));
console.log(decapitalize('W3resource'))
console.log(decapitalize('Red', true));